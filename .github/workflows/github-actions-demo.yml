name: Deploy EC2 Stack
on: [push]

jobs:
  Deploy-EC2-Stack:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # Enable debug logging
      - name: Enable Debug Logging
        run: echo "AWS_SDK_LOAD_CONFIG=1" >> $GITHUB_ENV

      # Authenticate using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::849059301510:role/github-action-deploy
          aws-region: eu-north-1

      # Log AWS identity to verify OIDC authentication
      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      # Check out repository code
      - name: Check out repository code
        uses: actions/checkout@v4

      # Print current directory
      - name: Print current directory files
        run: ls

      # Deploy the CloudFormation stack
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file ./ec2.yml \
            --stack-name EC2Stack \
            --capabilities CAPABILITY_NAMED_IAM

      # Wait for EC2 instance to be ready
      - name: Wait for EC2 Instance
        run: sleep 30

      # Deploy code to EC2 via SSM
      - name: Deploy Code to EC2 via SSM
        run: |
          echo "Starting deployment to EC2 instance"

          # Define application path
          APP_PATH="/home/ec2-user/app"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}.git"

          # Send the command with first-time deployment logic
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids i-058e4aacd23fbcfba \
            --document-name "AWS-RunShellScript" \
            --output text \
            --query "Command.CommandId" \
            --parameters '{
              "commands": [
                "echo \"Starting deployment at $(date)\"",
                
                "# Check if application directory exists",
                "if [ ! -d \"'${APP_PATH}'\" ]; then",
                "  echo \"First-time deployment - creating application directory and cloning repository\"",
                "  mkdir -p \"'${APP_PATH}'\"",
                "  git clone \"'${REPO_URL}'\" \"'${APP_PATH}'\"",
                "  cd \"'${APP_PATH}'\"",
                "else",
                "  echo \"Subsequent deployment - updating existing codebase\"",
                "  cd \"'${APP_PATH}'\"",
                "  git pull origin master || { echo \"Git pull failed\"; exit 1; }",
                "fi",
                
                "echo \"Installing dependencies...\"",
                "npm install || { echo \"npm install failed\"; exit 1; }",
                
                "echo \"Building application...\"",
                "npm run build || { echo \"build failed\"; exit 1; }",
              
              
                "# Install nginx if not already installed",
                "if ! command -v nginx &> /dev/null; then",
                "  echo \"Installing Nginx...\"",
                "  sudo amazon-linux-extras install nginx1 -y || sudo yum install nginx -y",
                "fi",

                "sudo chown -R www-data:www-data /home/ec2-user/app/dist;",
                "sudo find /home/ec2-user/app/dist -type d -exec chmod 755 {} \\;",
                "sudo find /home/ec2-user/app/dist -type f -exec chmod 644 {} \\;"

                "# Create Nginx configuration as a reverse proxy",
                "echo \"Configuring Nginx as reverse proxy...\"",
                
                "sudo bash -c 'cat > /etc/nginx/sites-available/default <<EOF\nserver {\n    listen 80;\n    server_name _;\n\n    root /home/ec2-user/app/dist;\n    index index.html;\n\n    location / {\n        try_files \\$uri /index.html;\n    }\n}\nEOF'",
                "sudo systemctl restart nginx || { echo \"Failed to restart Nginx\"; exit 1; }", 
               
                "echo \"Deployment completed successfully at $(date)\""
              ],
              "executionTimeout": ["3600"]
            }')

          echo "Command ID: $COMMAND_ID"

          # Wait for command to complete and poll for status
          echo "Waiting for command to complete..."

          STATUS="InProgress"
          while [ "$STATUS" = "InProgress" ] || [ "$STATUS" = "Pending" ]; do
            sleep 5
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id i-058e4aacd23fbcfba \
              --output text \
              --query "Status")
            echo "Current status: $STATUS"
          done

          # Get command output to display in GitHub Actions logs
          echo "Fetching command output..."
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id i-058e4aacd23fbcfba \
            --output text \
            --query "StandardOutputContent"

          # Check if the command was successful
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed with status: $STATUS"
            echo "Error output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id i-058e4aacd23fbcfba \
              --output text \
              --query "StandardErrorContent"
            exit 1
          fi

          echo "Deployment completed successfully!"
